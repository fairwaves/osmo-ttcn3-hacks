/* Translation Port sitting on top of UDP_asp UDP to encode/decode GTP */
/* (C) 2017 by Harald Welte <laforge@gnumonks.org */
module GTP_CodecPort {
	import from UDPasp_PortType all;
	import from UDPasp_Types all;
	import from GTPC_Types all;
	import from GTPU_Types all;

	/* identifies a remote peer (sender or receiver) */
	type record GtpPeer {
		integer		connId,
		AddressType	remName,
		PortType	remPort
	}

	/* Decoded GTP1C (Control Plane), used in send and receive direction */
	type record Gtp1cUnitdata {
		GtpPeer		peer,
		PDU_GTPC	gtpc
	}

	/* Decoded GTP1U (User Plane), used in send and receive direction */
	type record Gtp1uUnitdata {
		GtpPeer		peer,
		PDU_GTPU	gtpu
	}

 	/* Translation port on top of UDPasp; ASP_Event passed through transparently */
	type port GTPC_PT message map to UDPasp_PT {
		out	Gtp1cUnitdata to ASP_UDP_message with f_enc_Gtp1cUD(),
			ASP_UDP_open,
			ASP_UDP_close;
		in	Gtp1cUnitdata from ASP_UDP_message with f_dec_Gtp1cUD(),
			ASP_UDP_open_result;
		inout	ASP_UDP;
		/* we can declare variables here and use them from all functions with "port" label */
	}

	function f_enc_Gtp1cUD(in Gtp1cUnitdata in_ud, out ASP_UDP_message out_ud) port GTPC_PT {
		out_ud.id := in_ud.peer.connId;
		out_ud.remote_addr := in_ud.peer.remName;
		out_ud.remote_port := in_ud.peer.remPort;
		out_ud.data := enc_PDU_GTPC(in_ud.gtpc);
		port.setstate(0);
	} with { extension "prototype(fast)" };

	function f_dec_Gtp1cUD(in ASP_UDP_message in_ud, out Gtp1cUnitdata out_ud) port GTPC_PT {
		out_ud.peer.connId := in_ud.id;
		out_ud.peer.remName := in_ud.remote_addr;
		out_ud.peer.remPort := in_ud.remote_port;
		out_ud.gtpc := dec_PDU_GTPC(in_ud.data);
		port.setstate(0);
	} with { extension "prototype(fast)" };


	/* Translation port on top of UDPasp; ASP_Event passed through transparently */
	type port GTPU_PT message map to UDPasp_PT {
		out	Gtp1uUnitdata to ASP_UDP_message with f_enc_Gtp1uUD(),
			ASP_UDP_open,
			ASP_UDP_close;
		in	Gtp1uUnitdata from ASP_UDP_message with f_dec_Gtp1uUD(),
			ASP_UDP_open_result;
		inout	ASP_UDP;
		/* we can declare variables here and use them from all functions with "port" label */
	}

	function f_enc_Gtp1uUD(in Gtp1uUnitdata in_ud, out ASP_UDP_message out_ud) port GTPU_PT {
		out_ud.id := in_ud.peer.connId;
		out_ud.remote_addr := in_ud.peer.remName;
		out_ud.remote_port := in_ud.peer.remPort;
		out_ud.data := enc_PDU_GTPU(in_ud.gtpu);
		port.setstate(0);
	} with { extension "prototype(fast)" };

	function f_dec_Gtp1uUD(in ASP_UDP_message in_ud, out Gtp1uUnitdata out_ud) port GTPU_PT {
		out_ud.peer.connId := in_ud.id;
		out_ud.peer.remName := in_ud.remote_addr;
		out_ud.peer.remPort := in_ud.remote_port;
		out_ud.gtpu := dec_PDU_GTPU(in_ud.data);
		port.setstate(0);
	} with { extension "prototype(fast)" };
}
